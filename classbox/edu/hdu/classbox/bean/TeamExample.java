package edu.hdu.classbox.bean;

import java.util.ArrayList;
import java.util.List;

public class TeamExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table team
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table team
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table team
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table team
     *
     * @mbggenerated
     */
    public TeamExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table team
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table team
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table team
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table team
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table team
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table team
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table team
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table team
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table team
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table team
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table team
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andTmNoIsNull() {
            addCriterion("TmNo is null");
            return (Criteria) this;
        }

        public Criteria andTmNoIsNotNull() {
            addCriterion("TmNo is not null");
            return (Criteria) this;
        }

        public Criteria andTmNoEqualTo(String value) {
            addCriterion("TmNo =", value, "tmNo");
            return (Criteria) this;
        }

        public Criteria andTmNoNotEqualTo(String value) {
            addCriterion("TmNo <>", value, "tmNo");
            return (Criteria) this;
        }

        public Criteria andTmNoGreaterThan(String value) {
            addCriterion("TmNo >", value, "tmNo");
            return (Criteria) this;
        }

        public Criteria andTmNoGreaterThanOrEqualTo(String value) {
            addCriterion("TmNo >=", value, "tmNo");
            return (Criteria) this;
        }

        public Criteria andTmNoLessThan(String value) {
            addCriterion("TmNo <", value, "tmNo");
            return (Criteria) this;
        }

        public Criteria andTmNoLessThanOrEqualTo(String value) {
            addCriterion("TmNo <=", value, "tmNo");
            return (Criteria) this;
        }

        public Criteria andTmNoLike(String value) {
            addCriterion("TmNo like", value, "tmNo");
            return (Criteria) this;
        }

        public Criteria andTmNoNotLike(String value) {
            addCriterion("TmNo not like", value, "tmNo");
            return (Criteria) this;
        }

        public Criteria andTmNoIn(List<String> values) {
            addCriterion("TmNo in", values, "tmNo");
            return (Criteria) this;
        }

        public Criteria andTmNoNotIn(List<String> values) {
            addCriterion("TmNo not in", values, "tmNo");
            return (Criteria) this;
        }

        public Criteria andTmNoBetween(String value1, String value2) {
            addCriterion("TmNo between", value1, value2, "tmNo");
            return (Criteria) this;
        }

        public Criteria andTmNoNotBetween(String value1, String value2) {
            addCriterion("TmNo not between", value1, value2, "tmNo");
            return (Criteria) this;
        }

        public Criteria andCrsnoIsNull() {
            addCriterion("CrsNo is null");
            return (Criteria) this;
        }

        public Criteria andCrsnoIsNotNull() {
            addCriterion("CrsNo is not null");
            return (Criteria) this;
        }

        public Criteria andCrsnoEqualTo(String value) {
            addCriterion("CrsNo =", value, "crsno");
            return (Criteria) this;
        }

        public Criteria andCrsnoNotEqualTo(String value) {
            addCriterion("CrsNo <>", value, "crsno");
            return (Criteria) this;
        }

        public Criteria andCrsnoGreaterThan(String value) {
            addCriterion("CrsNo >", value, "crsno");
            return (Criteria) this;
        }

        public Criteria andCrsnoGreaterThanOrEqualTo(String value) {
            addCriterion("CrsNo >=", value, "crsno");
            return (Criteria) this;
        }

        public Criteria andCrsnoLessThan(String value) {
            addCriterion("CrsNo <", value, "crsno");
            return (Criteria) this;
        }

        public Criteria andCrsnoLessThanOrEqualTo(String value) {
            addCriterion("CrsNo <=", value, "crsno");
            return (Criteria) this;
        }

        public Criteria andCrsnoLike(String value) {
            addCriterion("CrsNo like", value, "crsno");
            return (Criteria) this;
        }

        public Criteria andCrsnoNotLike(String value) {
            addCriterion("CrsNo not like", value, "crsno");
            return (Criteria) this;
        }

        public Criteria andCrsnoIn(List<String> values) {
            addCriterion("CrsNo in", values, "crsno");
            return (Criteria) this;
        }

        public Criteria andCrsnoNotIn(List<String> values) {
            addCriterion("CrsNo not in", values, "crsno");
            return (Criteria) this;
        }

        public Criteria andCrsnoBetween(String value1, String value2) {
            addCriterion("CrsNo between", value1, value2, "crsno");
            return (Criteria) this;
        }

        public Criteria andCrsnoNotBetween(String value1, String value2) {
            addCriterion("CrsNo not between", value1, value2, "crsno");
            return (Criteria) this;
        }

        public Criteria andTmNameIsNull() {
            addCriterion("TmName is null");
            return (Criteria) this;
        }

        public Criteria andTmNameIsNotNull() {
            addCriterion("TmName is not null");
            return (Criteria) this;
        }

        public Criteria andTmNameEqualTo(String value) {
            addCriterion("TmName =", value, "tmName");
            return (Criteria) this;
        }

        public Criteria andTmNameNotEqualTo(String value) {
            addCriterion("TmName <>", value, "tmName");
            return (Criteria) this;
        }

        public Criteria andTmNameGreaterThan(String value) {
            addCriterion("TmName >", value, "tmName");
            return (Criteria) this;
        }

        public Criteria andTmNameGreaterThanOrEqualTo(String value) {
            addCriterion("TmName >=", value, "tmName");
            return (Criteria) this;
        }

        public Criteria andTmNameLessThan(String value) {
            addCriterion("TmName <", value, "tmName");
            return (Criteria) this;
        }

        public Criteria andTmNameLessThanOrEqualTo(String value) {
            addCriterion("TmName <=", value, "tmName");
            return (Criteria) this;
        }

        public Criteria andTmNameLike(String value) {
            addCriterion("TmName like", value, "tmName");
            return (Criteria) this;
        }

        public Criteria andTmNameNotLike(String value) {
            addCriterion("TmName not like", value, "tmName");
            return (Criteria) this;
        }

        public Criteria andTmNameIn(List<String> values) {
            addCriterion("TmName in", values, "tmName");
            return (Criteria) this;
        }

        public Criteria andTmNameNotIn(List<String> values) {
            addCriterion("TmName not in", values, "tmName");
            return (Criteria) this;
        }

        public Criteria andTmNameBetween(String value1, String value2) {
            addCriterion("TmName between", value1, value2, "tmName");
            return (Criteria) this;
        }

        public Criteria andTmNameNotBetween(String value1, String value2) {
            addCriterion("TmName not between", value1, value2, "tmName");
            return (Criteria) this;
        }

        public Criteria andTmPointAllIsNull() {
            addCriterion("TmPointAll is null");
            return (Criteria) this;
        }

        public Criteria andTmPointAllIsNotNull() {
            addCriterion("TmPointAll is not null");
            return (Criteria) this;
        }

        public Criteria andTmPointAllEqualTo(Float value) {
            addCriterion("TmPointAll =", value, "tmPointAll");
            return (Criteria) this;
        }

        public Criteria andTmPointAllNotEqualTo(Float value) {
            addCriterion("TmPointAll <>", value, "tmPointAll");
            return (Criteria) this;
        }

        public Criteria andTmPointAllGreaterThan(Float value) {
            addCriterion("TmPointAll >", value, "tmPointAll");
            return (Criteria) this;
        }

        public Criteria andTmPointAllGreaterThanOrEqualTo(Float value) {
            addCriterion("TmPointAll >=", value, "tmPointAll");
            return (Criteria) this;
        }

        public Criteria andTmPointAllLessThan(Float value) {
            addCriterion("TmPointAll <", value, "tmPointAll");
            return (Criteria) this;
        }

        public Criteria andTmPointAllLessThanOrEqualTo(Float value) {
            addCriterion("TmPointAll <=", value, "tmPointAll");
            return (Criteria) this;
        }

        public Criteria andTmPointAllIn(List<Float> values) {
            addCriterion("TmPointAll in", values, "tmPointAll");
            return (Criteria) this;
        }

        public Criteria andTmPointAllNotIn(List<Float> values) {
            addCriterion("TmPointAll not in", values, "tmPointAll");
            return (Criteria) this;
        }

        public Criteria andTmPointAllBetween(Float value1, Float value2) {
            addCriterion("TmPointAll between", value1, value2, "tmPointAll");
            return (Criteria) this;
        }

        public Criteria andTmPointAllNotBetween(Float value1, Float value2) {
            addCriterion("TmPointAll not between", value1, value2, "tmPointAll");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table team
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table team
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value) {
            super();
            this.condition = condition;
            this.value = value;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.betweenValue = true;
        }
    }
}